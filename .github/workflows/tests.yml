name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fetch-versions:
    runs-on: ubuntu-latest
    outputs:
      php-versions: ${{ steps.set-php-versions.outputs.versions }}
      wp-versions: ${{ steps.set-wp-versions.outputs.versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract PHP and WP version requirements
        id: extract
        run: |
          PHP_VERSION=$(grep -i "Requires PHP" wp-plugin-mold.php | sed -E 's/.*Requires PHP:\s*([0-9\.]+).*/\1/')
          WP_VERSION=$(grep -i "Requires at least" wp-plugin-mold.php | sed -E 's/.*Requires at least:\s*([0-9\.]+).*/\1/')
          echo "Extracted PHP_VERSION=${PHP_VERSION}"
          echo "Extracted WP_VERSION=${WP_VERSION}"
          echo "PHP_VERSION=${PHP_VERSION}" >> $GITHUB_ENV
          echo "WP_VERSION=${WP_VERSION}" >> $GITHUB_ENV

      - name: Debug PHP and WP versions
        run: |
          echo "PHP_VERSION from env: $PHP_VERSION"
          echo "WP_VERSION from env: $WP_VERSION"
        env:
          PHP_VERSION: ${{ env.PHP_VERSION }}
          WP_VERSION: ${{ env.WP_VERSION }}

      - name: Fetch available PHP versions
        id: set-php-versions
        run: |
          MIN_PHP_VERSION=${{ env.PHP_VERSION }}
          echo "Minimum PHP version required: $MIN_PHP_VERSION"
          PHP_VERSIONS=$(curl -s https://www.php.net/releases | grep -Po '(?<=version">)[^<]+' | sort -V | awk -v min=$MIN_PHP_VERSION '$1 >= min')
          echo "Filtered PHP versions: $PHP_VERSIONS"
          PHP_VERSIONS_JSON=$(echo $PHP_VERSIONS | jq -cR '[split(" ")[] | select(length > 0)]')
          echo "PHP_VERSIONS_JSON=${PHP_VERSIONS_JSON}"
          echo "versions=${PHP_VERSIONS_JSON}" >> $GITHUB_OUTPUT

      - name: Fetch available WP versions
        id: set-wp-versions
        run: |
          MIN_WP_VERSION=${{ env.WP_VERSION }}
          echo "Minimum WordPress version required: $MIN_WP_VERSION"
          WP_VERSIONS=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[].version' | sort -V | awk -v min=$MIN_WP_VERSION '$1 >= min')
          echo "Filtered WordPress versions: $WP_VERSIONS"
          WP_VERSIONS_JSON=$(echo $WP_VERSIONS | jq -cR '[split(" ")[] | select(length > 0)]')
          echo "WP_VERSIONS_JSON=${WP_VERSIONS_JSON}"
          echo "versions=${WP_VERSIONS_JSON}" >> $GITHUB_OUTPUT

      - name: Debug fetched versions
        run: |
          echo "PHP Versions: ${{ steps.set-php-versions.outputs.versions }}"
          echo "WP Versions: ${{ steps.set-wp-versions.outputs.versions }}"

  run-tests:
    needs: fetch-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ${{ fromJson(needs.fetch-versions.outputs.versions) }}
        wp-version: ${{ fromJson(needs.fetch-versions.outputs.wp-versions) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer, wp-cli

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Download WordPress
        run: wp core download --version=${{ matrix.wp-version }} --path=wordpress

      - name: Create wp-config.php
        run: wp config create --path=wordpress --dbname=wordpress --dbuser=root --dbpass=root --dbhost=127.0.0.1 --skip-check

      - name: Install WordPress
        run: wp core install --path=wordpress --url=http://localhost --title="Test Site" --admin_user=admin --admin_password=admin --admin_email=test@example.com

      - name: Install and activate the plugin
        run: |
          cp -r . wordpress/wp-content/plugins/wp-plugin-mold
          wp plugin activate wp-plugin-mold --path=wordpress

      - name: Run PHP tests
        run: composer test

      - name: Run WordPress plugin activation test
        run: wp eval 'echo "Plugin activated successfully\n";' --path=wordpress

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
